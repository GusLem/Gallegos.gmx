<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>texto = "";
network_set_config(network_config_use_non_blocking_socket,1);

buffer = buffer_create(1024,buffer_fixed,1);

crientes = ds_list_create();

txt_netw = "";
txt_alp = 0
alp_t = 0

gw = 1280;
gh = 720;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(crientes);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>error = instance_create(0,0,obj_neterror);
error.txt = "Server Timeout";

network_destroy(client);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if texto == "Cliente" {
    buffer_seek(buffer, buffer_seek_start,0);
    buffer_write(buffer,buffer_u8,6);
    network_send_packet(client,buffer,buffer_tell(buffer));
    alarm[4] = 210;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alp_t = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var port = 7405;

client = network_create_socket(network_socket_tcp);

if network_connect(client,ipu,port) &lt; 0 {
    txt_netw = "Connection Failed."
    with obj_controle.hst {
        active = 1
    }
    with obj_controle.clt {
        active = 1
    }
    alarm[2] = 60;
    exit;
}
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>buffer_seek(buffer, buffer_seek_start, 0);

buffer_write(buffer,buffer_u8,0);
buffer_write(buffer,buffer_string,client_name);

network_send_packet(client,buffer,buffer_tell(buffer));


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>txt_alp += (alp_t-txt_alp)/10
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch async_load[? "type"] {

    case network_type_connect:
        if ds_list_size(obj_controle.jogadores) &lt; 4 {
            ds_list_add(crientes,async_load[? "socket"]);
            
            buffer_seek(buffer, buffer_seek_start, 0);
            buffer_write(buffer,buffer_u8,7);
            buffer_write(buffer,buffer_u8,0);
            network_send_packet(async_load[? "socket"],buffer,buffer_tell(buffer));
        }
        else {
            buffer_seek(buffer, buffer_seek_start, 0);
            buffer_write(buffer,buffer_u8,7);
            buffer_write(buffer,buffer_u8,1);
            network_send_packet(async_load[? "socket"],buffer,buffer_tell(buffer));
            network_destroy(async_load[? "socket"]);
        }
    break;
    
    
    case network_type_data:
        alarm[3] = 180;
        buffer_received = async_load[? "buffer"];
        ler_buffer(buffer_received)
    break;
    
    case network_type_disconnect:
        ind = ds_list_find_index(crientes,async_load[? "socket"]);
        ds_list_delete(crientes,ind);
        
        if obj_controle.Estado = "pregame2" {
            ds_list_delete(obj_controle.jogadores,ind+1);
            ds_list_delete(obj_controle.bots,ind+1);
            
            buffer_seek(buffer, buffer_seek_start, 0);
            buffer_write(buffer,buffer_u8,9);
            buffer_write(buffer,buffer_u8,ind+1);
            
            for(i=0;i&lt;ds_list_size(crientes);i++) {
                network_send_packet(crientes[| i],buffer,buffer_tell(buffer));
            }
        }
        
        if obj_controle.Estado = "game" {
            buffer_seek(buffer, buffer_seek_start, 0);
            buffer_write(buffer,buffer_u8,5);
            
            for(i=0;i&lt;ds_list_size(crientes);i++) {
                network_send_packet(crientes[| i],buffer,buffer_tell(buffer));
            }
            
            error = instance_create(0,0,obj_neterror);
            error.txt = "Player Disconnected.#Aborting...";
            
            network_destroy(server);
            
        }
    break;
    

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>buffer_seek(buffer, buffer_seek_start,0);
buffer_write(buffer,buffer_u8,4);
        
if texto == "Servidor" {
    with base {
        infla(obj_controle.xc,obj_controle.yc);
    }
        
    obj_controle.jogador = circular(obj_controle.jogador+1,0,obj_controle.numjog-1);
    obj_controle.ready = false;
    obj_controle.alarm[0] = 45;    
    obj_controle.inflas--;

    for(i=0;i&lt;ds_list_size(crientes);i++) {
        network_send_packet(crientes[| i],buffer,buffer_tell(buffer));
    }
    
    checa_bot();
}
else {
    network_send_packet(client,buffer,buffer_tell(buffer));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>buffer_seek(buffer, buffer_seek_start, 0);
buffer_write(buffer,buffer_u8,3);

for(i=0;i&lt;ds_list_size(crientes);i++) {
    network_send_packet(crientes[| i],buffer,buffer_tell(buffer));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cria triangulo

buffer_seek(buffer, buffer_seek_start, 0);
buffer_write(buffer,buffer_u8,1);
buffer_write(buffer,buffer_u8,1);
buffer_write(buffer,buffer_u16,xis);
buffer_write(buffer,buffer_u16,yis);

if texto == "Servidor" {
    create_triangulo(xis,yis,xis + 32,yis + 32,obj_controle.jogador,0)
    obj_controle.jogador = circular(obj_controle.jogador+1,0,obj_controle.numjog-1);
    
    for(i=0;i&lt;ds_list_size(crientes);i++) {
        network_send_packet(crientes[| i],buffer,buffer_tell(buffer));
    }
    
    checa_bot();
    
}
else {
    network_send_packet(client,buffer,buffer_tell(buffer));
}

/*buffer_seek(buffer, buffer_seek_start, 0);
    buffer_write(buffer,buffer_u8,1);
    buffer_write(buffer,buffer_u16,mouse_x);
    buffer_write(buffer,buffer_u16,mouse_y);

    if texto == "Cliente" {
        network_send_packet(client,buffer,1024);
    }
    else {
        var xx = mouse_x;
        var yy = mouse_y;
        
        instance_create(xx,yy,obj_re7);
        
        for(i=0;i&lt;ds_list_size(crientes);i++) {
            network_send_packet(crientes[| i],buffer,buffer_tell(buffer));
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cria quadrado

buffer_seek(buffer, buffer_seek_start, 0);
buffer_write(buffer,buffer_u8,1);
buffer_write(buffer,buffer_u8,0);
buffer_write(buffer,buffer_u16,xis);
buffer_write(buffer,buffer_u16,yis);

if texto == "Servidor" {
    create_quadrado(xis,yis,xis + 32,yis + 32,obj_controle.jogador,0)
    obj_controle.quads[obj_controle.jogador]--;
    obj_controle.jogador = circular(obj_controle.jogador+1,0,obj_controle.numjog-1);
    
    for(i=0;i&lt;ds_list_size(crientes);i++) {
        network_send_packet(crientes[| i],buffer,buffer_tell(buffer));
    }
    
    checa_bot();
    
}
else {
    network_send_packet(client,buffer,buffer_tell(buffer));
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_halign(fa_center);
draw_set_color(c_white);
draw_set_alpha(txt_alp)
draw_text(gw/2,gh-100,txt_netw);
draw_set_alpha(1)

if alarm[4] != -1 and alarm[4] &lt; 180 {
    draw_set_halign(fa_right);
    if obj_controle.Estado == "game" {
        draw_set_color(c_black);
    }
    else {
        draw_set_color(c_white);
    }
    draw_set_font(font_normal)
    
    draw_text(gw-20,50,"Waiting for Server... " + string(alarm[4]/60))

}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
